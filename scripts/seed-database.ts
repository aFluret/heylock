/**
 * @file: scripts/seed-database.ts
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * @dependencies: @supabase/supabase-js, dotenv
 * @created: 2025-10-27
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run seed
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import type { Session, Event } from '../lib/types';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
config({ path: '.env.local' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || '';

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env.local —Å–æ–¥–µ—Ä–∂–∏—Ç:');
  console.error('  - NEXT_PUBLIC_SUPABASE_URL');
  console.error('  - SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const NUM_USERS = 15;
const NUM_SESSIONS = 80;
const NUM_EVENTS = 800;
const DAYS_BACK = 30;

// –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
const EVENT_TYPES = [
  'page_view',
  'button_click',
  'form_submit',
  'video_play',
  'video_pause',
  'image_view',
  'link_click',
  'search',
  'download',
  'purchase',
  'add_to_cart',
  'remove_from_cart',
  'login',
  'logout',
  'signup',
];

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function randomInt(min: number, max: number): number {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function randomElement<T>(array: T[]): T {
  return array[randomInt(0, array.length - 1)];
}

function randomDate(daysBack: number): Date {
  const now = new Date();
  const daysAgo = randomInt(0, daysBack);
  const hoursAgo = randomInt(0, 23);
  const minutesAgo = randomInt(0, 59);
  
  const date = new Date(now);
  date.setDate(date.getDate() - daysAgo);
  date.setHours(hoursAgo, minutesAgo, 0, 0);
  
  return date;
}

function generateUserId(index: number): string {
  return `user_${String(index).padStart(3, '0')}`;
}

async function clearExistingData() {
  console.log('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è (—Å–Ω–∞—á–∞–ª–∞, —Ç.–∫. –µ—Å—Ç—å FK)
  const { error: eventsError } = await supabase
    .from('events')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000'); // –£–¥–∞–ª—è–µ–º –≤—Å–µ
  
  if (eventsError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π:', eventsError);
  }
  
  // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏
  const { error: sessionsError } = await supabase
    .from('sessions')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000'); // –£–¥–∞–ª—è–µ–º –≤—Å–µ
  
  if (sessionsError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π:', sessionsError);
  }
  
  console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã\n');
}

async function generateSessions(): Promise<Session[]> {
  console.log(`üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${NUM_SESSIONS} —Å–µ—Å—Å–∏–π –¥–ª—è ${NUM_USERS} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
  
  const sessions: any[] = [];
  
  for (let i = 0; i < NUM_SESSIONS; i++) {
    const userId = generateUserId(randomInt(1, NUM_USERS));
    const startedAt = randomDate(DAYS_BACK);
    
    // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –æ—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 2 —á–∞—Å–æ–≤
    const durationSeconds = randomInt(60, 7200);
    const endedAt = new Date(startedAt.getTime() + durationSeconds * 1000);
    
    sessions.push({
      user_id: userId,
      started_at: startedAt.toISOString(),
      ended_at: endedAt.toISOString(),
      duration_seconds: durationSeconds,
    });
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–µ)
  sessions.sort((a, b) => 
    new Date(a.started_at).getTime() - new Date(b.started_at).getTime()
  );
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î –±–∞—Ç—á–∞–º–∏ –ø–æ 50
  const batchSize = 50;
  const insertedSessions: Session[] = [];
  
  for (let i = 0; i < sessions.length; i += batchSize) {
    const batch = sessions.slice(i, i + batchSize);
    const { data, error } = await supabase
      .from('sessions')
      .insert(batch)
      .select();
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–µ—Å—Å–∏–π:', error);
      throw error;
    }
    
    if (data) {
      insertedSessions.push(...data as Session[]);
    }
    
    process.stdout.write(`\r  –í—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π: ${Math.min(i + batchSize, sessions.length)}/${sessions.length}`);
  }
  
  console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–æ ${insertedSessions.length} —Å–µ—Å—Å–∏–π\n`);
  return insertedSessions;
}

async function generateEvents(sessions: Session[]): Promise<void> {
  console.log(`üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${NUM_EVENTS} —Å–æ–±—ã—Ç–∏–π...`);
  
  const events: any[] = [];
  
  for (let i = 0; i < NUM_EVENTS; i++) {
    const session = randomElement(sessions);
    const sessionStart = new Date(session.started_at);
    const sessionEnd = session.ended_at ? new Date(session.ended_at) : new Date();
    
    // –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –º–µ–∂–¥—É –Ω–∞—á–∞–ª–æ–º –∏ –∫–æ–Ω—Ü–æ–º —Å–µ—Å—Å–∏–∏
    const eventTime = new Date(
      sessionStart.getTime() + 
      Math.random() * (sessionEnd.getTime() - sessionStart.getTime())
    );
    
    const eventName = randomElement(EVENT_TYPES);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º properties –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    let properties: Record<string, any> = {};
    
    switch (eventName) {
      case 'page_view':
        properties = {
          page: randomElement(['/home', '/about', '/products', '/contact', '/blog', '/pricing']),
          referrer: randomElement(['google.com', 'direct', 'facebook.com', 'twitter.com']),
        };
        break;
      case 'button_click':
        properties = {
          button_id: `btn_${randomInt(1, 20)}`,
          button_text: randomElement(['Buy Now', 'Learn More', 'Sign Up', 'Download']),
        };
        break;
      case 'purchase':
        properties = {
          amount: randomInt(10, 500),
          currency: 'USD',
          product_id: `prod_${randomInt(1, 50)}`,
        };
        break;
      case 'search':
        properties = {
          query: randomElement(['analytics', 'dashboard', 'reports', 'api', 'integration']),
          results_count: randomInt(0, 100),
        };
        break;
      default:
        properties = {
          source: 'web',
          device: randomElement(['desktop', 'mobile', 'tablet']),
        };
    }
    
    events.push({
      session_id: session.id,
      event_name: eventName,
      timestamp: eventTime.toISOString(),
      properties,
    });
  }
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î –±–∞—Ç—á–∞–º–∏ –ø–æ 100
  const batchSize = 100;
  
  for (let i = 0; i < events.length; i += batchSize) {
    const batch = events.slice(i, i + batchSize);
    const { error } = await supabase
      .from('events')
      .insert(batch);
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏–π:', error);
      throw error;
    }
    
    process.stdout.write(`\r  –í—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${Math.min(i + batchSize, events.length)}/${events.length}`);
  }
  
  console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–æ ${events.length} —Å–æ–±—ã—Ç–∏–π\n`);
}

async function printStatistics() {
  console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n');
  
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
  const { count: sessionsCount } = await supabase
    .from('sessions')
    .select('*', { count: 'exact', head: true });
  
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
  const { count: eventsCount } = await supabase
    .from('events')
    .select('*', { count: 'exact', head: true });
  
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  const { data: users } = await supabase
    .from('sessions')
    .select('user_id');
  
  const uniqueUsers = new Set(users?.map(s => s.user_id) || []).size;
  
  // –¢–æ–ø —Å–æ–±—ã—Ç–∏–π
  const { data: topEvents } = await supabase
    .from('events')
    .select('event_name');
  
  const eventCounts: Record<string, number> = {};
  topEvents?.forEach(e => {
    eventCounts[e.event_name] = (eventCounts[e.event_name] || 0) + 1;
  });
  
  const topEventsList = Object.entries(eventCounts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5);
  
  console.log(`  üìä –°–µ—Å—Å–∏–π: ${sessionsCount}`);
  console.log(`  üéØ –°–æ–±—ã—Ç–∏–π: ${eventsCount}`);
  console.log(`  üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${uniqueUsers}`);
  console.log(`\n  üèÜ –¢–æ–ø-5 —Å–æ–±—ã—Ç–∏–π:`);
  topEventsList.forEach(([name, count], index) => {
    console.log(`     ${index + 1}. ${name}: ${count}`);
  });
  
  console.log('');
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ seed-—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Heylock\n');
  console.log('‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:');
  console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${NUM_USERS}`);
  console.log(`   - –°–µ—Å—Å–∏–π: ${NUM_SESSIONS}`);
  console.log(`   - –°–æ–±—ã—Ç–∏–π: ${NUM_EVENTS}`);
  console.log(`   - –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${DAYS_BACK} –¥–Ω–µ–π\n`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const { error: connectionError } = await supabase
      .from('sessions')
      .select('count')
      .limit(1);
    
    if (connectionError) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase: ${connectionError.message}`);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    await clearExistingData();
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
    const sessions = await generateSessions();
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    await generateEvents(sessions);
    
    // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await printStatistics();
    
    console.log('‚úÖ Seed-—Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã:');
    console.log('   - npm run dev');
    console.log('   - –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000\n');
    
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();

