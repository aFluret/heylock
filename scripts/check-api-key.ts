/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ fetch
 */
import { config } from 'dotenv';
config({ path: '.env.local' });

const apiKey = process.env.GOOGLE_GEMINI_API_KEY;

async function checkAPI() {
  console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞...\n');
  console.log('–î–ª–∏–Ω–∞ –∫–ª—é—á–∞:', apiKey?.length);
  console.log('–ù–∞—á–∞–ª–æ –∫–ª—é—á–∞:', apiKey?.substring(0, 10) + '...\n');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
  try {
    console.log('1Ô∏è‚É£  –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...');
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`
    );
    
    if (!response.ok) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
      const text = await response.text();
      console.log('–û—Ç–≤–µ—Ç:', text.substring(0, 200));
    } else {
      const data = await response.json();
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:');
      if (data.models && Array.isArray(data.models)) {
        data.models.forEach((model: any) => {
          console.log(`   - ${model.name}`);
        });
      }
    }
  } catch (error: any) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  console.log('\n2Ô∏è‚É£  –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Gemini API...');
  try {
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: '–ü—Ä–∏–≤–µ—Ç!' }]
          }]
        })
      }
    );
    
    if (!response.ok) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
      const text = await response.text();
      console.log('–û—Ç–≤–µ—Ç:', text);
    } else {
      const data = await response.json();
      console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', JSON.stringify(data, null, 2).substring(0, 300));
    }
  } catch (error: any) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkAPI();

