/**
 * @file: scripts/test-api-chat.ts
 * @description: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint /api/chat
 * @created: 2025-10-27
 * 
 * –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:
 * 1. npm run dev –∑–∞–ø—É—â–µ–Ω (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ localhost:3000)
 * 2. RPC —Ñ—É–Ω–∫—Ü–∏—è execute_raw_sql —Å–æ–∑–¥–∞–Ω–∞ –≤ Supabase
 */

const API_URL = 'http://localhost:3000/api/chat';

interface TestCase {
  name: string;
  message: string;
  expectedChartType?: string;
}

const testCases: TestCase[] = [
  {
    name: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é',
    message: '–ü–æ–∫–∞–∂–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é',
    expectedChartType: 'line',
  },
  {
    name: '–¢–æ–ø —Å–æ–±—ã—Ç–∏–π',
    message: '–ö–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —á–∞—â–µ –≤—Å–µ–≥–æ?',
    expectedChartType: 'bar',
  },
  {
    name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –≤—á–µ—Ä–∞',
    message: '–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ —Å–µ—Å—Å–∏–π –≤—á–µ—Ä–∞?',
  },
  {
    name: '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π',
    message: '–ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏?',
  },
];

async function testAPI(testCase: TestCase): Promise<void> {
  console.log(`\nüß™ –¢–µ—Å—Ç: ${testCase.name}`);
  console.log(`   –í–æ–ø—Ä–æ—Å: "${testCase.message}"`);

  try {
    const startTime = Date.now();
    
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: testCase.message,
      }),
    });

    const duration = Date.now() - startTime;

    if (!response.ok) {
      const error = await response.json();
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ ${response.status}:`, error.error);
      if (error.details) {
        console.log(`   –î–µ—Ç–∞–ª–∏:`, error.details);
      }
      return;
    }

    const data = await response.json();

    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ (${duration}ms)`);
    console.log(`   üìä –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞: ${data.chartType}`);
    console.log(`   üìà –î–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫: ${data.chartData?.labels?.length || 0}`);
    console.log(`   üí¨ –ü–æ—è—Å–Ω–µ–Ω–∏–µ: ${data.explanation?.substring(0, 100)}...`);

    if (testCase.expectedChartType && data.chartType !== testCase.expectedChartType) {
      console.log(`   ‚ö†Ô∏è  –û–∂–∏–¥–∞–ª—Å—è ${testCase.expectedChartType}, –ø–æ–ª—É—á–µ–Ω ${data.chartType}`);
    }

  } catch (error: any) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:`, error.message);
  }
}

async function checkHealth(): Promise<boolean> {
  console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...');
  
  try {
    const response = await fetch(API_URL, {
      method: 'GET',
    });

    if (!response.ok) {
      console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }

    const data = await response.json();
    console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç:', data.message);
    console.log(`   –í–µ—Ä—Å–∏—è: ${data.version}\n`);
    return true;
  } catch (error: any) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
    console.log('   1. npm run dev –∑–∞–ø—É—â–µ–Ω');
    console.log('   2. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://localhost:3000');
    return false;
  }
}

async function main() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint /api/chat\n');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
  const isHealthy = await checkHealth();
  if (!isHealthy) {
    console.log('\n‚ö†Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: npm run dev');
    process.exit(1);
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
  console.log('üìù –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
  
  for (const testCase of testCases) {
    await testAPI(testCase);
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n');
}

main();

