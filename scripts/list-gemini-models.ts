/**
 * @file: scripts/list-gemini-models.ts
 * @description: –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini
 * @created: 2025-10-27
 */

import { config } from 'dotenv';
import { GoogleGenerativeAI } from '@google/generative-ai';

config({ path: '.env.local' });

const apiKey = process.env.GOOGLE_GEMINI_API_KEY;

if (!apiKey) {
  console.error('‚ùå GOOGLE_GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω');
  process.exit(1);
}

async function listModels() {
  try {
    const genAI = new GoogleGenerativeAI(apiKey!);
    
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...\n');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
    const models = [
      'gemini-1.5-flash-latest',
      'gemini-1.5-pro-latest', 
      'gemini-pro',
      'gemini-1.5-flash',
      'gemini-1.5-pro',
      'models/gemini-pro',
      'models/gemini-1.5-flash',
    ];
    
    let foundWorking = false;
    
    for (const modelName of models) {
      try {
        console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${modelName}`);
        const model = genAI.getGenerativeModel({ model: modelName });
        const result = await model.generateContent('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç!');
        const response = await result.response;
        console.log(`‚úÖ ${modelName} - –†–ê–ë–û–¢–ê–ï–¢!`);
        console.log(`   –û—Ç–≤–µ—Ç: ${response.text()}`);
        console.log(`\nüéâ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å: ${modelName}\n`);
        foundWorking = true;
        break; // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
      } catch (error: any) {
        const shortError = error.message.includes('404') ? '404 Not Found' : error.message.substring(0, 100);
        console.log(`‚ùå ${modelName} - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (${shortError})\n`);
      }
    }
    
    if (!foundWorking) {
      console.log('\n‚ö†Ô∏è  –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ:');
      console.log('   1. API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      console.log('   2. Generative Language API –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      console.log('   3. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é (–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)\n');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

listModels();

